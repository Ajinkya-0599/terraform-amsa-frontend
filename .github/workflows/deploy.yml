name: CI/CD Deploy with Terraform

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1️⃣ Checkout Frontend Repo
    - name: Checkout Frontend Repo
      uses: actions/checkout@v3
      with:
        repository: 'Ajinkya-0599/terraform-amsa-frontend'
        path: frontend

    # 2️⃣ Checkout Backend Repo
    - name: Checkout Backend Repo
      uses: actions/checkout@v3
      with:
        repository: 'Ajinkya-0599/terraform-amsa-backend'
        path: backend

    # 3️⃣ Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.9.5

    # 4️⃣ Terraform Init
    - name: Terraform Init
      working-directory: frontend/terraform
      run: terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    # 5️⃣ Terraform Validate
    - name: Terraform Validate
      working-directory: frontend/terraform
      run: terraform validate

    # 6️⃣ Terraform Plan
    - name: Terraform Plan
      working-directory: frontend/terraform
      run: terraform plan -out=tfplan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    # 7️⃣ Terraform Apply
    - name: Terraform Apply
      working-directory: frontend/terraform
      run: terraform apply -auto-approve tfplan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    # 8️⃣ Get EC2 Public IP
    - name: Get EC2 Public IP
      id: get_ip
      run: |
        INSTANCE_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=Amsa-EC2-Instance" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].PublicIpAddress" \
          --output text \
          --region ${{ secrets.AWS_REGION }})
        echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    # 9️⃣ Deploy Frontend & Backend to EC2 via SSH
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.INSTANCE_IP }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # Clone or update repos
          [ ! -d "/home/ubuntu/terraform-amsa-frontend" ] && git clone https://github.com/Ajinkya-0599/terraform-amsa-frontend.git /home/ubuntu/terraform-amsa-frontend
          [ ! -d "/home/ubuntu/terraform-amsa-backend" ] && git clone https://github.com/Ajinkya-0599/terraform-amsa-backend.git /home/ubuntu/terraform-amsa-backend

          cd /home/ubuntu/terraform-amsa-frontend && git pull origin main
          cd /home/ubuntu/terraform-amsa-backend && git pull origin main

          # Build and deploy frontend
          cd /home/ubuntu/terraform-amsa-frontend
          npm install
          npm run build
          npm run export || true
          sudo rm -rf /var/www/terraform-amsa-frontend
          sudo mkdir -p /var/www/terraform-amsa-frontend
          sudo cp -r out/* /var/www/terraform-amsa-frontend/

          # Backend setup
          cd /home/ubuntu/terraform-amsa-backend
          npm install
          pm2 restart terraform-amsa-backend || pm2 start server.js --name terraform-amsa-backend --watch

          # Restart Nginx and PM2
          sudo nginx -t
          sudo systemctl restart nginx
          pm2 save
      env:
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
